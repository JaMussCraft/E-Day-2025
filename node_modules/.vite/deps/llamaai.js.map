{
  "version": 3,
  "sources": ["../../llamaai/index.js"],
  "sourcesContent": ["import axios from \"axios\";\n\n\nclass LlamaAI {\n  constructor(apiToken, hostname = 'https://api.llama-api.com', domainPath = '/chat/completions') {\n    this.hostname = hostname;\n    this.domainPath = domainPath;\n    this.apiToken = apiToken;\n    this.headers = { Authorization: `Bearer ${this.apiToken}` };\n    this.queue = [];\n  }\n\n  async makeRequest(apiRequestJson) {\n    try {\n      return await axios.post(`${this.hostname}${this.domainPath}`, apiRequestJson, { headers: this.headers });\n    } catch (error) {\n      throw new Error(`Error while making request: ${error.message}`);\n    }\n  }\n\n  async _runStreamForJupyter(apiRequestJson) {\n    const response = await this.makeRequest(apiRequestJson);\n\n    for (const chunk of response.data) {\n      this.queue.push(chunk);\n    }\n  }\n\n  async *getSequences() {\n    while (this.queue.length > 0) {\n      yield this.queue.shift();\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n\n  async runStream(apiRequestJson) {\n    await this._runStreamForJupyter(apiRequestJson);\n    this.getSequences();\n  }\n\n  async runSync(apiRequestJson) {\n    const response = await this.makeRequest(apiRequestJson);\n\n    if (response.status !== 200) {\n      throw new Error(`POST ${response.status} ${response.data.detail}`);\n    }\n\n    return response.data;\n  }\n\n  run(apiRequestJson) {\n    if (apiRequestJson.stream) {\n      return this.runStream(apiRequestJson);\n    } else {\n      return this.runSync(apiRequestJson);\n    }\n  }\n}\n\nexport default LlamaAI"],
  "mappings": ";;;;;;AAGA,IAAM,UAAN,MAAc;AAAA,EACZ,YAAY,UAAU,WAAW,6BAA6B,aAAa,qBAAqB;AAC9F,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,WAAW;AAChB,SAAK,UAAU,EAAE,eAAe,UAAU,KAAK,QAAQ,GAAG;AAC1D,SAAK,QAAQ,CAAC;AAAA,EAChB;AAAA,EAEA,MAAM,YAAY,gBAAgB;AAChC,QAAI;AACF,aAAO,MAAM,cAAM,KAAK,GAAG,KAAK,QAAQ,GAAG,KAAK,UAAU,IAAI,gBAAgB,EAAE,SAAS,KAAK,QAAQ,CAAC;AAAA,IACzG,SAAS,OAAO;AACd,YAAM,IAAI,MAAM,+BAA+B,MAAM,OAAO,EAAE;AAAA,IAChE;AAAA,EACF;AAAA,EAEA,MAAM,qBAAqB,gBAAgB;AACzC,UAAM,WAAW,MAAM,KAAK,YAAY,cAAc;AAEtD,eAAW,SAAS,SAAS,MAAM;AACjC,WAAK,MAAM,KAAK,KAAK;AAAA,IACvB;AAAA,EACF;AAAA,EAEA,OAAO,eAAe;AACpB,WAAO,KAAK,MAAM,SAAS,GAAG;AAC5B,YAAM,KAAK,MAAM,MAAM;AACvB,YAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,GAAG,CAAC;AAAA,IACvD;AAAA,EACF;AAAA,EAEA,MAAM,UAAU,gBAAgB;AAC9B,UAAM,KAAK,qBAAqB,cAAc;AAC9C,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,MAAM,QAAQ,gBAAgB;AAC5B,UAAM,WAAW,MAAM,KAAK,YAAY,cAAc;AAEtD,QAAI,SAAS,WAAW,KAAK;AAC3B,YAAM,IAAI,MAAM,QAAQ,SAAS,MAAM,IAAI,SAAS,KAAK,MAAM,EAAE;AAAA,IACnE;AAEA,WAAO,SAAS;AAAA,EAClB;AAAA,EAEA,IAAI,gBAAgB;AAClB,QAAI,eAAe,QAAQ;AACzB,aAAO,KAAK,UAAU,cAAc;AAAA,IACtC,OAAO;AACL,aAAO,KAAK,QAAQ,cAAc;AAAA,IACpC;AAAA,EACF;AACF;AAEA,IAAO,kBAAQ;",
  "names": []
}
